// /********************************************************************************
//     Typography sass map for responsive type scale
//     Source: https://www.sitepoint.com/build-responsive-type-scale-bootstrap/
// ********************************************************************************/
$type-scales: (
	minor-second: 1.067,
	major-second: 1.125,
	minor-third: 1.2,
	major-third: 1.25,
	perfect-fourth: 1.333,
	augmented-fourth: 1.414,
	perfect-fifth: 1.5,
	golden-ratio: 1.618
);

//These variables hold the initial scales that are used from a zero-width viewport or browser and upward.
$heading-type-scale-base: minor-third;
$display-type-scale-base: minor-third;

// check if the value passed to the mixin is one of the values set in the $type-scales map or it must be a unitless value to create the type scale:
@function check-type-scale-value($scale) {
	// Check $scale against the values in $type-scales.
	@if map-has-key($type-scales, $scale) {
		// If the value of $scale is defined in
		// $type-scales, return the value of $scale.
		@return map-get($type-scales, $scale);

		// If the value of $scale is not defined in the
		// $type-scales map, check if the value is a number
		// and that the number is a unitless value.
	} @else if type-of($scale) == number and unitless($scale) {
		// If the value of $scale is a unitless number,
		// return the number.
		@return $scale;

		// Lastly, should the value passed to $scale be neither
		// found in the $type-scales map nor a unitless number,
		// throw a Sass error to explain the issue.
	} @else {
		// Throw a Sass error if the $scale value is
		// neither found in the $type-scales map nor
		// a unitless number.
		@error "Sorry, `#{$scale}` is not a unitless number value or a pre-defined key in the $type-scales map.";
	}
}

// This mixin is used to create the heading font sizes from h6 to h1.
@mixin create-heading-type-scale($scale) {
	// Check the $scale value and store in a variable to be
	// used when calculating the font sizes.
	$the-heading-type-scale: check-type-scale-value($scale);

	// Starting from h6, multiply each previous value by the scale
	// to get the next font size
	$font-size-h6: $font-size-base;
	$font-size-h5: $font-size-h6 * $the-heading-type-scale;
	$font-size-h4: $font-size-h5 * $the-heading-type-scale;
	$font-size-h3: $font-size-h4 * $the-heading-type-scale;
	$font-size-h2: $font-size-h3 * $the-heading-type-scale;
	$font-size-h1: $font-size-h2 * $the-heading-type-scale;
	// $font-size-display-base is made global to allow for accessing the
	// varibale in the next mixin.
	$font-size-display-base: $font-size-h1 !global;

	// Add the created font sizes to the elements and classes
	h1,
	.h1 {
		font-size: $font-size-h1;
	}
	h2,
	.h2 {
		font-size: $font-size-h2;
	}
	h3,
	.h3 {
		font-size: $font-size-h3;
	}
	h4,
	.h4 {
		font-size: $font-size-h4;
	}
	h5,
	.h5 {
		font-size: $font-size-h5;
	}
	h6,
	.h6 {
		font-size: $font-size-h6;
	}
}

// Set root font size.
html {
	font-size: 14px;
	@media (min-width: 768px) {
		font-size: 16px;
	}
	@media (min-width: 992px) {
		font-size: 18px;
	}
}

// Scales
// Create the heading font sizes
@include create-heading-type-scale($heading-type-scale-base);

// Create the display font sizes
@include create-display-type-scale($display-type-scale-base);

// At the Bootstrap md breakpoint, adjust the heading font sizes.
@media (min-width: 768px) {
	@include create-heading-type-scale(minor-third);
}
